<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://iamalos.github.io/coding-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://iamalos.github.io/coding-blog/" rel="alternate" type="text/html" /><updated>2022-06-13T09:33:58-05:00</updated><id>https://iamalos.github.io/coding-blog/feed.xml</id><title type="html">Coding Blog</title><subtitle>Personal blog related to coding in python and swift</subtitle><entry><title type="html">My First Post</title><link href="https://iamalos.github.io/coding-blog/2022/06/14/My-First-Post.ipynb" rel="alternate" type="text/html" title="My First Post" /><published>2022-06-14T00:00:00-05:00</published><updated>2022-06-14T00:00:00-05:00</updated><id>https://iamalos.github.io/coding-blog/2022/06/14/My-First-Post</id><author><name></name></author><summary type="html"><![CDATA[{ "cells": [ { "cell_type": "markdown", "id": "d3c469e5", "metadata": { "cellId": "81f9jqs3r85qd7xdulnmi" }, "source": [ "# \"Functions Description\"\n", "> \"Going through some functions and classes that will be extensively used in blog\"\n", "- toc: true\n", "- branch: master\n", "- badges: true\n", "- comments: true\n", "- permalink: /first-post/\n", "- hide: true\n", "- categories: [d2l, deeplearning, jupyter]" ] }, { "cell_type": "markdown", "id": "2329bf49", "metadata": { "cellId": "von8noiyvgm025by1zt1dgf" }, "source": [ "## 1.1 Plotting functions" ] }, { "cell_type": "code", "execution_count": 2, "id": "a2b309dc", "metadata": { "cellId": "9aacx5n56nqn0h8eieijmg" }, "outputs": [], "source": [ "# hide\n", "from matplotlib import pyplot as plt\n", "from typing import Union, Tuple\n", "from IPython import display\n", "\n", "%matplotlib inline" ] }, { "cell_type": "code", "execution_count": 80, "id": "585724ba", "metadata": { "cellId": "nmec7o14crda5lt7p2es6" }, "outputs": [], "source": [ "#collapse\n", "def set_axes(axes: plt.Axes, xlabel: str, ylabel: str, \n", " xlim: Union[int, float], ylim: Union[int, float],\n", " xscale: str, yscale: str, legend: str, darkMode: bool = False) -> plt.Axes:\n", " \"\"\"\n", " Customizes the provided axes according to the provided parameters\n", " \"\"\"\n", " # set labels\n", " axes.set_xlabel(xlabel)\n", " axes.set_ylabel(ylabel)\n", " \n", " # must be used before setting `xlim` and `ylim` to avoid distorting the graph\n", " axes.set_xscale(xscale)\n", " axes.set_yscale(yscale)\n", " \n", " # set limits\n", " axes.set_xlim(xlim)\n", " axes.set_ylim(ylim)\n", " \n", " # add legend\n", " if legend is not None: axes.legend(legend)\n", " \n", " # add square grid\n", " axes.grid()\n", " \n", " return axes\n", "\n", "def set_global_graph_params(figsize: Tuple[float, float] = (3.5, 2.5),\n", " darkmode: bool = False):\n", " \"\"\"\n", " Use plt parameters to set the figure size and background style.\n", " \n", " For more details please refer to https://matplotlib.org/3.5.0/tutorials/introductory/customizing.html#customizing-with-dynamic-rc-settings\n", " \"\"\"\n", " # set size of the figure\n", " plt.rcParams['figure.figsize'] = figsize\n", " \n", " display.set_matplotlib_formats('svg')\n", " # use if dark background is enables\n", " plt.style.use(\"dark_background\") if darkmode else plt.style.use(\"ggplot\")\n", "\n", "\n", " \n", "def plot(X: Union[list, torch.Tensor], Y:Union[list, torch.Tensor] = None, \n", " xlabel: str = None, ylabel: str = None, legend: str = None, xlim: Union[int, float] = None, \n", " ylim: Union[int, float] = None, xscale: str = 'linear', yscale: str = 'linear',\n", " fmts: Tuple[str] = ('-', 'm--', 'g-.', 'r:'), \n", " figsize: Tuple[float, float] = (3.5, 2.5), axes: plt.Axes = None, darkmode: bool = False):\n", " \n", " set_global_graph_params(figsize, darkmode)\n", " axes = axes if axes else plt.gca()\n", " \n", " def has_one_axis(X):\n", " \"\"\"\n", " Check if X is a 1-d list of 1-d tensor / array\n", " \"\"\"\n", " return (hasattr(X, \"ndim\") and X.ndim == 1) or \\\n", " (isinstance(X, list) and (not hasattr(X[0], \"__len__\")))\n", " \n", " if has_one_axis(X):\n", " X = [X]\n", " if Y is None:\n", " X, Y = [[]]*len(X), X\n", " elif has_one_axis(Y):\n", " Y = [Y]\n", " \n", " # if X and Y are of different lengths, adjust X for the length of Y\n", " if len(X) != len(Y):\n", " X = X * len(Y)\n", " \n", " if axes is None: axes = plt.gca()\n", " plt.cla()\n", " \n", " for x, y, fmt in zip(X, Y, fmts):\n", " if len(x):\n", " axes.plot(x, y, fmt)\n", " else:\n", " axes.plot(y, fmt)\n", " \n", " set_axes(axes, xlabel, ylabel, xlim, ylim, xscale, yscale, legend)" ] }, { "cell_type": "markdown", "id": "8cc8d936", "metadata": { "cellId": "ffp6ethgur933xcpaei4n1" }, "source": [ "#### Examples" ] }, { "cell_type": "code", "execution_count": 81, "id": "7d0d7967", "metadata": { "cellId": "os7d4gnjv2yk3ij1czux" }, "outputs": [ { "data": { "image/svg+xml": [ "\n", "\n", "\n", "\n", " \n", " \n", " \n", " \n", " 2022-06-13T14:24:47.831757\n", " image/svg+xml\n", " \n", " \n", " Matplotlib v3.3.3, https://matplotlib.org/\n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", "\n" ], "text/plain": [ "" ] }, "metadata": {}, "output_type": "display_data" } ], "source": [ "X = list(range(1, 100, 1))\n", "plot(X)" ] }, { "cell_type": "code", "execution_count": 0, "id": "759d8e94", "metadata": { "cellId": "wk59vomo65dq5vfeokkc09" }, "outputs": [], "source": [] }, { "cell_type": "code", "execution_count": 0, "id": "ee331519", "metadata": { "cellId": "5cwfluuueo8310xqvzlu5y" }, "outputs": [], "source": [] }, { "cell_type": "code", "execution_count": 0, "id": "1b7a985d", "metadata": { "cellId": "fbwz1mflzj7l1elvpn2yq" }, "outputs": [], "source": [] }, { "cell_type": "code", "execution_count": 12, "id": "60eecfa2", "metadata": { "cellId": "5sv3pbyj6y1v125eik8e9" }, "outputs": [ { "data": { "text/plain": [ "[]" ] }, "execution_count": 12, "metadata": {}, "output_type": "execute_result" }, { "data": { "image/svg+xml": [ "\n", "\n", "\n", "\n", " \n", " \n", " \n", " \n", " 2022-06-13T12:52:45.918858\n", " image/svg+xml\n", " \n", " \n", " Matplotlib v3.3.3, https://matplotlib.org/\n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", " \n", "\n" ], "text/plain": [ "" ] }, "metadata": {}, "output_type": "display_data" } ], "source": [ "set_global_graph_parameters(darkmode=False)\n", "test_axes = plt.axes()\n", "set_axes(test_axes, xlabel=\"Label X\", ylabel=\"Label Y\", \n", " xlim=10, ylim=12, xscale=\"linear\", \n", " yscale=\"linear\", legend=\"Hello world\")\n", "test_axes.grid()\n", "plt.plot([1,2,3,4], axes = test_axes)" ] }, { "cell_type": "code", "execution_count": 0, "id": "1f8ed12c", "metadata": { "cellId": "1evvyh7z10uv0onadsggwh" }, "outputs": [], "source": [] }, { "cell_type": "code", "execution_count": 0, "id": "6d0cb6f9", "metadata": { "cellId": "0j26shc4lpk4oybzxdw96i" }, "outputs": [], "source": [] }, { "cell_type": "code", "execution_count": 0, "id": "2edfc3b3", "metadata": { "cellId": "6s1bfddpj6dchqmjuvxee" }, "outputs": [], "source": [] } ], "metadata": { "kernelspec": { "description": "IPython kernel implementation for Yandex DataSphere", "display_name": "Yandex DataSphere Kernel", "name": "python3", "resources": {}, "spec": { "argv": [ "/bin/true" ], "codemirror_mode": "python", "display_name": "Yandex DataSphere Kernel", "env": {}, "help_links": [], "language": "python" } }, "language_info": { "codemirror_mode": { "name": "ipython", "version": 3 }, "file_extension": ".py", "mimetype": "text/x-python", "name": "python", "nbconvert_exporter": "python", "pygments_lexer": "ipython3", "version": "3.7.7" }, "notebookId": "26f61984-9a0b-41df-bf86-9e25b409a9b8", "notebookPath": "coding-blog/2022-06-14-My-First-Post.ipynb" }, "nbformat": 4, "nbformat_minor": 5 }]]></summary></entry><entry><title type="html">Fastpages Notebook Blog Post</title><link href="https://iamalos.github.io/coding-blog/jupyter/2020/02/20/test.html" rel="alternate" type="text/html" title="Fastpages Notebook Blog Post" /><published>2020-02-20T00:00:00-06:00</published><updated>2020-02-20T00:00:00-06:00</updated><id>https://iamalos.github.io/coding-blog/jupyter/2020/02/20/test</id><author><name></name></author><category term="jupyter" /><summary type="html"><![CDATA[A tutorial of fastpages for Jupyter notebooks.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://iamalos.github.io/coding-blog/images/chart-preview.png" /><media:content medium="image" url="https://iamalos.github.io/coding-blog/images/chart-preview.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">An Example Markdown Post</title><link href="https://iamalos.github.io/coding-blog/markdown/2020/01/14/test-markdown-post.html" rel="alternate" type="text/html" title="An Example Markdown Post" /><published>2020-01-14T00:00:00-06:00</published><updated>2020-01-14T00:00:00-06:00</updated><id>https://iamalos.github.io/coding-blog/markdown/2020/01/14/test-markdown-post</id><author><name></name></author><category term="markdown" /><summary type="html"><![CDATA[A minimal example of using markdown with fastpages.]]></summary></entry></feed>